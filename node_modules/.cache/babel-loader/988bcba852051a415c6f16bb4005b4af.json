{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\bfs-visualization\\\\src\\\\BFS\\\\BFS.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './BFS.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BFS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      hexSize: 20,\n      hexOrigin: {\n        x: 400,\n        y: 300\n      },\n      currentHex: {\n        q: 0,\n        r: 0,\n        s: 0,\n        x: 0,\n        y: 0\n      },\n      playerPosition: {\n        q: 0,\n        r: 0,\n        s: 0,\n        x: 0,\n        y: 0\n      }\n    };\n  }\n\n  componentWillMount() {\n    let hexParametres = this.getHexParametres();\n    this.setState({\n      canvasSize: {\n        canvasWidth: 800,\n        canvasHeight: 600\n      },\n      hexParametres: hexParametres\n    });\n    console.log(\"componentWillM working\");\n  }\n\n  componentDidMount() {\n    console.log(\"DidMountWorking-ShivamSolanki\");\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.canvasCoordinates.width = canvasWidth;\n    this.canvasCoordinates.height = canvasHeight;\n    this.getCanvasPosition(this.canvasCoordinates);\n    this.drawHexes();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.currentHex !== this.state.currentHex) {\n      const {\n        q,\n        r,\n        s,\n        x,\n        y\n      } = nextState.currentHex;\n      const {\n        canvasWidth,\n        canvasHeight\n      } = this.state.canvasSize;\n      const ctx = this.canvasCoordinates.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      let currentDistanceLine = nextState.currentDistanceLine;\n\n      for (let i = 0; i <= currentDistanceLine.length - 1; i++) {\n        if (i == 0) this.drawHex(this.canvasCoordinates, this.Point(currentDistanceLine[i].x, currentDistanceLine[i].y), \"black\", 1, \"yellow\");else this.drawHex(this.canvasCoordinates, this.Point(currentDistanceLine[i].x, currentDistanceLine[i].y), \"black\", 1, \"grey\");\n      } // this.drawNeighbors(this.Hex(q,r,s));\n\n\n      this.drawHex(this.canvasCoordinates, this.Point(x, y), \"lime\", 2);\n      return true;\n    }\n\n    return false;\n  }\n\n  getHexCornerCoord(center, i) {\n    let angle_deg = 60 * i + 30;\n    let angle_rad = Math.PI / 180 * angle_deg;\n    let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n    let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n    return this.Point(x, y);\n  }\n\n  Point(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  drawHex(canvasID, center, lineColor, width, fillColor) {\n    for (let i = 0; i <= 5; i++) {\n      let start = this.getHexCornerCoord(center, i);\n      let end = this.getHexCornerCoord(center, i + 1);\n      this.fillHex(canvasID, center, fillColor);\n      this.drawLine(canvasID, start, end, lineColor, width);\n    }\n  }\n\n  drawLine(canvasID, start, end, color, width) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  drawHexes() {\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    const {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    } = this.state.hexParametres;\n    const hexOrigin = this.state.hexOrigin;\n    let qLeftSide = Math.round(hexOrigin.x / hexWidth) * 4;\n    let qRightSide = Math.round(canvasWidth - hexOrigin.x) / hexWidth * 2;\n    let rTopSide = Math.round(hexOrigin.y / (hexHeight / 2));\n    let rBottomSide = Math.round((canvasHeight - hexOrigin.y) / (hexHeight / 2));\n    var p = 0;\n\n    for (let r = 0; r <= rBottomSide; r++) {\n      if (r % 2 === 0 && r !== 0) {\n        p++;\n      }\n\n      for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const {\n          x,\n          y\n        } = this.hexToPixel(this.Hex(q - p, r));\n\n        if (x > hexWidth / 2 && x < canvasWidth - hexWidth / 2 && y > hexHeight / 2 && y < canvasHeight - hexHeight / 2) {\n          this.drawHex(this.canvasHex, this.Point(x, y), \"black\", 1, \"grey\"); // this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q-p,r,-(q-p)-r));\n        }\n      }\n    }\n\n    var n = 0;\n\n    for (let r = -1; r >= -rTopSide; r--) {\n      if (r % 2 !== 0) {\n        n++;\n      }\n\n      for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const {\n          x,\n          y\n        } = this.hexToPixel(this.Hex(q + n, r));\n\n        if (x > hexWidth / 2 && x < canvasWidth - hexWidth / 2 && y > hexHeight / 2 && y < canvasHeight - hexHeight / 2) {\n          this.drawHex(this.canvasHex, this.Point(x, y), \"black\", 1, \"grey\"); // this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q+n,r,-(q+n)-r));\n        }\n      }\n    }\n  }\n\n  hexToPixel(h) {\n    let hexOrigin = this.state.hexOrigin;\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r / 2) + hexOrigin.x;\n    ;\n    let y = this.state.hexSize * (3 / 2 * h.r) + hexOrigin.y;\n    return this.Point(x, y);\n  }\n\n  drawHexCoordinates(canvasID, center, h) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillText(h.q, center.x + 6, center.y);\n    ctx.fillText(h.r, center.x - 3, center.y + 15);\n    ctx.fillText(h.s, center.x - 12, center.y);\n  }\n\n  Hex(q, r, s) {\n    return {\n      q: q,\n      r: r,\n      s: s\n    };\n  }\n\n  getHexParametres() {\n    let hexHeight = this.state.hexSize * 2;\n    let hexWidth = Math.sqrt(3) / 2 * hexHeight;\n    let verDist = hexHeight * 3 / 4;\n    let horizDist = hexWidth;\n    return {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    };\n  }\n\n  handleMouseMove(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    const {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    } = this.state.hexParametres;\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top;\n    playerPosition = this.state.playerPosition;\n    const {\n      q,\n      r,\n      s\n    } = this.cubeRound(this.pixelToHex(this.Point(offsetX, offsetY)));\n    const {\n      x,\n      y\n    } = this.hexToPixel(this.Hex(q, r, s));\n    this.getDistanceLine(this.Hex(playerPosition.q, playerPosition.r, playerPosition.s), this.Hex(q, r, s));\n    console.log(this.state.currentDistanceLine);\n\n    if (x > hexWidth / 2 && x < canvasWidth - hexWidth / 2 && y < canvasHeight - hexHeight / 2) {\n      this.setState({\n        currentHex: {\n          q,\n          r,\n          s,\n          x,\n          y\n        }\n      });\n    }\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  }\n\n  pixelToHex(p) {\n    let size = this.state.hexSize;\n    let origin = this.state.hexOrigin;\n    var q = ((p.x - origin.x) * Math.sqrt(3) / 3 - (p.y - origin.y) / 3) / size;\n    var r = (p.y - origin.y) * 2 / 3 / size;\n    return this.Hex(q, r, -q - r);\n  }\n\n  cubeRound(cube) {\n    var rx = Math.round(cube.q);\n    var ry = Math.round(cube.r);\n    var rz = Math.round(cube.s);\n    var x_diff = Math.abs(rx - cube.q);\n    var y_diff = Math.abs(ry - cube.r);\n    var z_diff = Math.abs(rz - cube.s);\n\n    if (x_diff > y_diff && x_diff > z_diff) {\n      rx = -ry - rz;\n    } else if (y_diff > z_diff) {\n      ry = -rx - rz;\n    } else {\n      rz = -rx - ry;\n    }\n\n    return this.Hex(rx, ry, rz);\n  }\n\n  cubeDirections(direction) {\n    const cubeDirections = [this.Hex(1, 0, -1), this.Hex(1, -1, 0), this.Hex(0, -1, 1), this.Hex(-1, 0, 1), this.Hex(-1, 1, 0), this.Hex(0, 1, -1)];\n    return cubeDirections[direction];\n  }\n\n  cubeAdd(a, b) {\n    return this.Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n\n  cubeSubstract(hexA, hexB) {\n    return this.Hex(hexA.q - hexB.q, hexA.r - hexB.r, hexA.s - hexB.s);\n  }\n\n  getCubeNeighbor(h, direction) {\n    return this.cubeAdd(h, this.cubeDirections(direction));\n  }\n\n  drawNeighbors(h) {\n    for (let i = 0; i <= 5; i++) {\n      const {\n        q,\n        r,\n        s\n      } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      const {\n        x,\n        y\n      } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasCoordinates, this.Point(x, y), \"red\", 2);\n    }\n  }\n\n  cubeDistance(hexA, hexB) {\n    const {\n      q,\n      r,\n      s\n    } = this.cubeSubstract(hexA, hexB);\n    return (Math.abs(q) + Math.abs(r) + Math.abs(s)) / 2;\n  }\n\n  linearInt(a, b, t) {\n    return a + (b - a) * t;\n  }\n\n  cubeLinearInt(hexA, hexB, t) {\n    return this.Hex(this.linearInt(hexA.q, hexB.q, t), this.linearInt(hexA.r, hexB.r, t), this.linearInt(hexA.s, hexB.s, t));\n  }\n\n  getDistanceLine(hexA, hexB) {\n    let dist = this.cubeDistance(hexA, hexB);\n    var arr = [];\n\n    for (let i = 0; i <= dist; i++) {\n      let center = this.hexToPixel(this.cubeRound(this.cubeLinearInt(hexA, hexB, 1.0 / dist * i)));\n      arr = [].concat(arr, center);\n    }\n\n    this.setState({\n      currentDistanceLine: arr\n    });\n  }\n\n  fillHex(canvasID, center, fillColor) {\n    let c0 = this.getHexCornerCoord(center, 0);\n    let c1 = this.getHexCornerCoord(center, 1);\n    let c2 = this.getHexCornerCoord(center, 2);\n    let c3 = this.getHexCornerCoord(center, 3);\n    let c4 = this.getHexCornerCoord(center, 4);\n    let c5 = this.getHexCornerCoord(center, 5);\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.globalAlpha = 0.1;\n    ctx.moveTo(c0.x, c0.y);\n    ctx.lineTo(c1.x, c1.y);\n    ctx.lineTo(c2.x, c2.y);\n    ctx.lineTo(c3.x, c3.y);\n    ctx.lineTo(c4.x, c4.y);\n    ctx.lineTo(c5.x, c5.y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  handleClick() {\n    this.setState({\n      plaerPosition: this.state.currentHex\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BFS\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasHex => this.canvasHex = canvasHex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasCoordinates => this.canvasCoordinates = canvasCoordinates,\n        onMouseMove: this.handleMouseMove,\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS/bfs-visualization/src/BFS/BFS.jsx"],"names":["React","Component","ReactDOM","BFS","constructor","props","handleMouseMove","bind","handleClick","state","hexSize","hexOrigin","x","y","currentHex","q","r","s","playerPosition","componentWillMount","hexParametres","getHexParametres","setState","canvasSize","canvasWidth","canvasHeight","console","log","componentDidMount","canvasHex","width","height","canvasCoordinates","getCanvasPosition","drawHexes","shouldComponentUpdate","nextProps","nextState","ctx","getContext","clearRect","currentDistanceLine","i","length","drawHex","Point","getHexCornerCoord","center","angle_deg","angle_rad","Math","PI","cos","sin","canvasID","lineColor","fillColor","start","end","fillHex","drawLine","color","beginPath","moveTo","strokeStyle","lineWidth","lineTo","stroke","closePath","hexWidth","hexHeight","verDist","horizDist","qLeftSide","round","qRightSide","rTopSide","rBottomSide","p","hexToPixel","Hex","n","h","sqrt","drawHexCoordinates","fillText","e","left","right","top","bottom","canvasPosition","offsetX","pageX","offsetY","pageY","cubeRound","pixelToHex","getDistanceLine","rect","getBoundingClientRect","size","origin","cube","rx","ry","rz","x_diff","abs","y_diff","z_diff","cubeDirections","direction","cubeAdd","a","b","cubeSubstract","hexA","hexB","getCubeNeighbor","drawNeighbors","cubeDistance","linearInt","t","cubeLinearInt","dist","arr","concat","c0","c1","c2","c3","c4","c5","fillStyle","globalAlpha","fill","plaerPosition","render"],"mappings":";AAAA,OAAQA,KAAR,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAM,WAAN;;AACA,eAAe,MAAMC,GAAN,SAAmBH,KAAK,CAACC,SAAzB,CAAkC;AAE7CG,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,eAAL,GAAqB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAArB;AACF,SAAKC,WAAL,GAAiB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAjB;AACE,SAAKE,KAAL,GAAW;AACPC,MAAAA,OAAO,EAAC,EADD;AAEPC,MAAAA,SAAS,EAAE;AAACC,QAAAA,CAAC,EAAC,GAAH;AAAOC,QAAAA,CAAC,EAAC;AAAT,OAFJ;AAGPC,MAAAA,UAAU,EAAC;AAACC,QAAAA,CAAC,EAAC,CAAH;AAAKC,QAAAA,CAAC,EAAC,CAAP;AAASC,QAAAA,CAAC,EAAC,CAAX;AAAaL,QAAAA,CAAC,EAAC,CAAf;AAAiBC,QAAAA,CAAC,EAAC;AAAnB,OAHJ;AAIPK,MAAAA,cAAc,EAAC;AAACH,QAAAA,CAAC,EAAC,CAAH;AAAKC,QAAAA,CAAC,EAAC,CAAP;AAASC,QAAAA,CAAC,EAAC,CAAX;AAAaL,QAAAA,CAAC,EAAC,CAAf;AAAiBC,QAAAA,CAAC,EAAC;AAAnB;AAJR,KAAX;AAOH;;AAEDM,EAAAA,kBAAkB,GAAE;AAChB,QAAIC,aAAa,GAAC,KAAKC,gBAAL,EAAlB;AACA,SAAKC,QAAL,CAAc;AACVC,MAAAA,UAAU,EAAC;AAACC,QAAAA,WAAW,EAAC,GAAb;AAAiBC,QAAAA,YAAY,EAAC;AAA9B,OADD;AAETL,MAAAA,aAAa,EAAEA;AAFN,KAAd;AAKAM,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEH;;AACLC,EAAAA,iBAAiB,GAAE;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAEI,UAAK;AAACH,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAA2B,KAAKhB,KAAL,CAAWc,UAA3C;AACA,SAAKM,SAAL,CAAeC,KAAf,GAAqBN,WAArB;AACA,SAAKK,SAAL,CAAeE,MAAf,GAAsBN,YAAtB;AACA,SAAKO,iBAAL,CAAuBF,KAAvB,GAA6BN,WAA7B;AACA,SAAKQ,iBAAL,CAAuBD,MAAvB,GAA8BN,YAA9B;AACA,SAAKQ,iBAAL,CAAuB,KAAKD,iBAA5B;AACA,SAAKE,SAAL;AACH;;AACDC,EAAAA,qBAAqB,CAACC,SAAD,EAAWC,SAAX,EAAqB;AACtC,QAAGA,SAAS,CAACvB,UAAV,KAAuB,KAAKL,KAAL,CAAWK,UAArC,EAAgD;AAC5C,YAAK;AAACC,QAAAA,CAAD;AAAGC,QAAAA,CAAH;AAAKC,QAAAA,CAAL;AAAOL,QAAAA,CAAP;AAASC,QAAAA;AAAT,UAAYwB,SAAS,CAACvB,UAA3B;AACA,YAAK;AAACU,QAAAA,WAAD;AAAaC,QAAAA;AAAb,UAA2B,KAAKhB,KAAL,CAAWc,UAA3C;AACD,YAAMe,GAAG,GAAC,KAAKN,iBAAL,CAAuBO,UAAvB,CAAkC,IAAlC,CAAV;AACAD,MAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAkBhB,WAAlB,EAA8BC,YAA9B;AACF,UAAIgB,mBAAmB,GAAEJ,SAAS,CAACI,mBAAnC;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAED,mBAAmB,CAACE,MAApB,GAA2B,CAA1C,EAA4CD,CAAC,EAA7C,EACD;AAAC,YAAGA,CAAC,IAAE,CAAN,EACG,KAAKE,OAAL,CAAa,KAAKZ,iBAAlB,EAAoC,KAAKa,KAAL,CAAWJ,mBAAmB,CAACC,CAAD,CAAnB,CAAuB9B,CAAlC,EAAoC6B,mBAAmB,CAACC,CAAD,CAAnB,CAAuB7B,CAA3D,CAApC,EAAkG,OAAlG,EAA0G,CAA1G,EAA4G,QAA5G,EADH,KAES,KAAK+B,OAAL,CAAa,KAAKZ,iBAAlB,EAAoC,KAAKa,KAAL,CAAWJ,mBAAmB,CAACC,CAAD,CAAnB,CAAuB9B,CAAlC,EAAoC6B,mBAAmB,CAACC,CAAD,CAAnB,CAAuB7B,CAA3D,CAApC,EAAkG,OAAlG,EAA0G,CAA1G,EAA4G,MAA5G;AACT,OAV+C,CAa7C;;;AACA,WAAK+B,OAAL,CAAa,KAAKZ,iBAAlB,EAAoC,KAAKa,KAAL,CAAWjC,CAAX,EAAaC,CAAb,CAApC,EAAoD,MAApD,EAA2D,CAA3D;AACC,aAAO,IAAP;AACH;;AACL,WAAO,KAAP;AAEC;;AACAiC,EAAAA,iBAAiB,CAACC,MAAD,EAASL,CAAT,EAAW;AACzB,QAAIM,SAAS,GAAG,KAAKN,CAAL,GAAQ,EAAxB;AACA,QAAIO,SAAS,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAV,GAAgBH,SAAhC;AACA,QAAIpC,CAAC,GAACmC,MAAM,CAACnC,CAAP,GAAU,KAAKH,KAAL,CAAWC,OAAX,GAAqBwC,IAAI,CAACE,GAAL,CAASH,SAAT,CAArC;AAEA,QAAIpC,CAAC,GAACkC,MAAM,CAAClC,CAAP,GAAW,KAAKJ,KAAL,CAAWC,OAAX,GAAqBwC,IAAI,CAACG,GAAL,CAASJ,SAAT,CAAtC;AACA,WAAO,KAAKJ,KAAL,CAAWjC,CAAX,EAAaC,CAAb,CAAP;AACH;;AACDgC,EAAAA,KAAK,CAACjC,CAAD,EAAGC,CAAH,EAAK;AACN,WAAO;AAACD,MAAAA,CAAC,EAAEA,CAAJ;AAAMC,MAAAA,CAAC,EAAEA;AAAT,KAAP;AACH;;AACD+B,EAAAA,OAAO,CAACU,QAAD,EAAUP,MAAV,EAAiBQ,SAAjB,EAA2BzB,KAA3B,EAAiC0B,SAAjC,EAA2C;AAC9C,SAAI,IAAId,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAE,CAAf,EAAiBA,CAAC,EAAlB,EACA;AACI,UAAIe,KAAK,GAAC,KAAKX,iBAAL,CAAuBC,MAAvB,EAA8BL,CAA9B,CAAV;AACA,UAAIgB,GAAG,GAAC,KAAKZ,iBAAL,CAAuBC,MAAvB,EAA8BL,CAAC,GAAC,CAAhC,CAAR;AACA,WAAKiB,OAAL,CAAaL,QAAb,EAAsBP,MAAtB,EAA6BS,SAA7B;AACA,WAAKI,QAAL,CAAcN,QAAd,EAAuBG,KAAvB,EAA6BC,GAA7B,EAAiCH,SAAjC,EAA2CzB,KAA3C;AACH;AACJ;;AAED8B,EAAAA,QAAQ,CAACN,QAAD,EAAUG,KAAV,EAAgBC,GAAhB,EAAoBG,KAApB,EAA0B/B,KAA1B,EACR;AACI,UAAMQ,GAAG,GAACgB,QAAQ,CAACf,UAAT,CAAoB,IAApB,CAAV;AACED,IAAAA,GAAG,CAACwB,SAAJ;AACFxB,IAAAA,GAAG,CAACyB,MAAJ,CAAWN,KAAK,CAAC7C,CAAjB,EAAmB6C,KAAK,CAAC5C,CAAzB;AACAyB,IAAAA,GAAG,CAAC0B,WAAJ,GAAgBH,KAAhB;AACAvB,IAAAA,GAAG,CAAC2B,SAAJ,GAAcnC,KAAd;AAEAQ,IAAAA,GAAG,CAAC4B,MAAJ,CAAWR,GAAG,CAAC9C,CAAf,EAAiB8C,GAAG,CAAC7C,CAArB;AACAyB,IAAAA,GAAG,CAAC6B,MAAJ;AACA7B,IAAAA,GAAG,CAAC8B,SAAJ;AACH;;AACDlC,EAAAA,SAAS,GAAE;AACP,UAAK;AAACV,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAA2B,KAAKhB,KAAL,CAAWc,UAA3C;AACA,UAAK;AAAC8C,MAAAA,QAAD;AAAUC,MAAAA,SAAV;AAAoBC,MAAAA,OAApB;AAA4BC,MAAAA;AAA5B,QAAuC,KAAK/D,KAAL,CAAWW,aAAvD;AACA,UAAMT,SAAS,GAAC,KAAKF,KAAL,CAAWE,SAA3B;AACA,QAAI8D,SAAS,GAACvB,IAAI,CAACwB,KAAL,CAAW/D,SAAS,CAACC,CAAV,GAAYyD,QAAvB,IAAiC,CAA/C;AACA,QAAIM,UAAU,GAACzB,IAAI,CAACwB,KAAL,CAAWlD,WAAW,GAACb,SAAS,CAACC,CAAjC,IAAoCyD,QAApC,GAA6C,CAA5D;AACE,QAAIO,QAAQ,GAAC1B,IAAI,CAACwB,KAAL,CAAW/D,SAAS,CAACE,CAAV,IAAayD,SAAS,GAAC,CAAvB,CAAX,CAAb;AACA,QAAIO,WAAW,GAAC3B,IAAI,CAACwB,KAAL,CAAW,CAACjD,YAAY,GAACd,SAAS,CAACE,CAAxB,KAA4ByD,SAAS,GAAC,CAAtC,CAAX,CAAhB;AAEA,QAAIQ,CAAC,GAAC,CAAN;;AACA,SAAI,IAAI9D,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAE6D,WAAf,EAA2B7D,CAAC,EAA5B,EAA+B;AAC3B,UAAGA,CAAC,GAAC,CAAF,KAAM,CAAN,IAASA,CAAC,KAAG,CAAhB,EACA;AACI8D,QAAAA,CAAC;AACJ;;AACD,WAAI,IAAI/D,CAAC,GAAC,CAAC0D,SAAX,EAAqB1D,CAAC,IAAE4D,UAAxB,EAAmC5D,CAAC,EAApC,EACA;AACI,cAAK;AAACH,UAAAA,CAAD;AAAGC,UAAAA;AAAH,YAAM,KAAKkE,UAAL,CAAgB,KAAKC,GAAL,CAASjE,CAAC,GAAC+D,CAAX,EAAa9D,CAAb,CAAhB,CAAX;;AACA,YAAIJ,CAAC,GAACyD,QAAQ,GAAC,CAAX,IAAczD,CAAC,GAACY,WAAW,GAAC6C,QAAQ,GAAC,CAAtC,IAA4CxD,CAAC,GAACyD,SAAS,GAAC,CAAZ,IAAezD,CAAC,GAACY,YAAY,GAAC6C,SAAS,GAAC,CAAvF,EAA0F;AACtF,eAAK1B,OAAL,CAAa,KAAKf,SAAlB,EAA4B,KAAKgB,KAAL,CAAWjC,CAAX,EAAaC,CAAb,CAA5B,EAA4C,OAA5C,EAAoD,CAApD,EAAsD,MAAtD,EADsF,CAEvF;AACF;AACJ;AACJ;;AACD,QAAIoE,CAAC,GAAC,CAAN;;AACA,SAAI,IAAIjE,CAAC,GAAC,CAAC,CAAX,EAAaA,CAAC,IAAE,CAAC4D,QAAjB,EAA0B5D,CAAC,EAA3B,EACA;AACI,UAAGA,CAAC,GAAC,CAAF,KAAM,CAAT,EACA;AACIiE,QAAAA,CAAC;AAEJ;;AACD,WAAI,IAAIlE,CAAC,GAAC,CAAC0D,SAAX,EAAqB1D,CAAC,IAAE4D,UAAxB,EAAmC5D,CAAC,EAApC,EACA;AACI,cAAK;AAACH,UAAAA,CAAD;AAAGC,UAAAA;AAAH,YAAM,KAAKkE,UAAL,CAAgB,KAAKC,GAAL,CAASjE,CAAC,GAACkE,CAAX,EAAajE,CAAb,CAAhB,CAAX;;AACA,YAAIJ,CAAC,GAACyD,QAAQ,GAAC,CAAX,IAAczD,CAAC,GAACY,WAAW,GAAC6C,QAAQ,GAAC,CAAtC,IAA2CxD,CAAC,GAACyD,SAAS,GAAC,CAAZ,IAAezD,CAAC,GAACY,YAAY,GAAC6C,SAAS,GAAC,CAAtF,EAAyF;AAClF,eAAK1B,OAAL,CAAa,KAAKf,SAAlB,EAA4B,KAAKgB,KAAL,CAAWjC,CAAX,EAAaC,CAAb,CAA5B,EAA4C,OAA5C,EAAoD,CAApD,EAAsD,MAAtD,EADkF,CAEnF;AACL;AACJ;AACJ;AAEN;;AACDkE,EAAAA,UAAU,CAACG,CAAD,EAAG;AAAC,QAAIvE,SAAS,GAAC,KAAKF,KAAL,CAAWE,SAAzB;AACV,QAAIC,CAAC,GAAG,KAAKH,KAAL,CAAWC,OAAX,GAAqBwC,IAAI,CAACiC,IAAL,CAAU,CAAV,CAArB,IAAqCD,CAAC,CAACnE,CAAF,GAAMmE,CAAC,CAAClE,CAAF,GAAI,CAA/C,IAAkDL,SAAS,CAACC,CAApE;AAAsE;AACtE,QAAIC,CAAC,GAAG,KAAKJ,KAAL,CAAWC,OAAX,IAA+C,IAAE,CAAF,GAAMwE,CAAC,CAAClE,CAAvD,IAA0DL,SAAS,CAACE,CAA5E;AACA,WAAO,KAAKgC,KAAL,CAAWjC,CAAX,EAAcC,CAAd,CAAP;AACH;;AAEDuE,EAAAA,kBAAkB,CAAC9B,QAAD,EAAUP,MAAV,EAAiBmC,CAAjB,EAClB;AACI,UAAM5C,GAAG,GAACgB,QAAQ,CAACf,UAAT,CAAoB,IAApB,CAAV;AACAD,IAAAA,GAAG,CAAC+C,QAAJ,CAAaH,CAAC,CAACnE,CAAf,EAAiBgC,MAAM,CAACnC,CAAP,GAAS,CAA1B,EAA4BmC,MAAM,CAAClC,CAAnC;AACAyB,IAAAA,GAAG,CAAC+C,QAAJ,CAAaH,CAAC,CAAClE,CAAf,EAAiB+B,MAAM,CAACnC,CAAP,GAAS,CAA1B,EAA4BmC,MAAM,CAAClC,CAAP,GAAS,EAArC;AACAyB,IAAAA,GAAG,CAAC+C,QAAJ,CAAaH,CAAC,CAACjE,CAAf,EAAiB8B,MAAM,CAACnC,CAAP,GAAS,EAA1B,EAA6BmC,MAAM,CAAClC,CAApC;AAEH;;AAEDmE,EAAAA,GAAG,CAACjE,CAAD,EAAGC,CAAH,EAAKC,CAAL,EAAO;AACN,WAAO;AAACF,MAAAA,CAAC,EAAEA,CAAJ;AAAMC,MAAAA,CAAC,EAAEA,CAAT;AAAWC,MAAAA,CAAC,EAAEA;AAAd,KAAP;AACH;;AACDI,EAAAA,gBAAgB,GAAE;AACd,QAAIiD,SAAS,GAAC,KAAK7D,KAAL,CAAWC,OAAX,GAAmB,CAAjC;AACA,QAAI2D,QAAQ,GAACnB,IAAI,CAACiC,IAAL,CAAU,CAAV,IAAa,CAAb,GAAeb,SAA5B;AACA,QAAIC,OAAO,GAACD,SAAS,GAAC,CAAV,GAAY,CAAxB;AACA,QAAIE,SAAS,GAACH,QAAd;AACA,WAAO;AAACA,MAAAA,QAAD;AAAUC,MAAAA,SAAV;AAAoBC,MAAAA,OAApB;AAA4BC,MAAAA;AAA5B,KAAP;AACH;;AACDlE,EAAAA,eAAe,CAACgF,CAAD,EAAG;AACd,UAAK;AAACC,MAAAA,IAAD;AAAMC,MAAAA,KAAN;AAAYC,MAAAA,GAAZ;AAAgBC,MAAAA;AAAhB,QAAwB,KAAKjF,KAAL,CAAWkF,cAAxC;AACJ,UAAK;AAACnE,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAA2B,KAAKhB,KAAL,CAAWc,UAA3C;AACA,UAAK;AAAC8C,MAAAA,QAAD;AAAUC,MAAAA,SAAV;AAAoBC,MAAAA,OAApB;AAA4BC,MAAAA;AAA5B,QAAuC,KAAK/D,KAAL,CAAWW,aAAvD;AACI,QAAIwE,OAAO,GAACN,CAAC,CAACO,KAAF,GAAQN,IAApB;AACA,QAAIO,OAAO,GAACR,CAAC,CAACS,KAAF,GAAQN,GAApB;AACAvE,IAAAA,cAAc,GAAC,KAAKT,KAAL,CAAWS,cAA1B;AACA,UAAK;AAACH,MAAAA,CAAD;AAAGC,MAAAA,CAAH;AAAKC,MAAAA;AAAL,QAAQ,KAAK+E,SAAL,CAAe,KAAKC,UAAL,CAAgB,KAAKpD,KAAL,CAAW+C,OAAX,EAAmBE,OAAnB,CAAhB,CAAf,CAAb;AACE,UAAK;AAAClF,MAAAA,CAAD;AAAGC,MAAAA;AAAH,QAAM,KAAKkE,UAAL,CAAgB,KAAKC,GAAL,CAASjE,CAAT,EAAWC,CAAX,EAAaC,CAAb,CAAhB,CAAX;AACA,SAAKiF,eAAL,CAAqB,KAAKlB,GAAL,CAAS9D,cAAc,CAACH,CAAxB,EAA0BG,cAAc,CAACF,CAAzC,EAA2CE,cAAc,CAACD,CAA1D,CAArB,EAAkF,KAAK+D,GAAL,CAASjE,CAAT,EAAWC,CAAX,EAAaC,CAAb,CAAlF;AACLS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWgC,mBAAvB;;AAEG,QAAI7B,CAAC,GAACyD,QAAQ,GAAC,CAAX,IAAczD,CAAC,GAACY,WAAW,GAAC6C,QAAQ,GAAC,CAAtC,IAA2CxD,CAAC,GAACY,YAAY,GAAC6C,SAAS,GAAC,CAAvE,EAA0E;AACxE,WAAKhD,QAAL,CAAc;AACVR,QAAAA,UAAU,EAAC;AAACC,UAAAA,CAAD;AAAGC,UAAAA,CAAH;AAAKC,UAAAA,CAAL;AAAOL,UAAAA,CAAP;AAASC,UAAAA;AAAT;AADD,OAAd;AAEG;AACJ;;AACLoB,EAAAA,iBAAiB,CAACqB,QAAD,EACjB;AACI,QAAI6C,IAAI,GAAC7C,QAAQ,CAAC8C,qBAAT,EAAT;AACA,SAAK9E,QAAL,CAAc;AACVqE,MAAAA,cAAc,EAAE;AAACJ,QAAAA,IAAI,EAAEY,IAAI,CAACZ,IAAZ;AAAiBC,QAAAA,KAAK,EAAGW,IAAI,CAACX,KAA9B;AAAoCC,QAAAA,GAAG,EAAEU,IAAI,CAACV,GAA9C;AAAkDC,QAAAA,MAAM,EAAGS,IAAI,CAACT;AAAhE;AADN,KAAd;AAGH;;AACDO,EAAAA,UAAU,CAACnB,CAAD,EAAG;AACT,QAAIuB,IAAI,GAAC,KAAK5F,KAAL,CAAWC,OAApB;AACA,QAAI4F,MAAM,GAAC,KAAK7F,KAAL,CAAWE,SAAtB;AACA,QAAII,CAAC,GAAG,CAAC,CAAC+D,CAAC,CAAClE,CAAF,GAAI0F,MAAM,CAAC1F,CAAZ,IAAesC,IAAI,CAACiC,IAAL,CAAU,CAAV,CAAf,GAA4B,CAA5B,GAA8B,CAACL,CAAC,CAACjE,CAAF,GAAIyF,MAAM,CAACzF,CAAZ,IAAe,CAA9C,IAAmDwF,IAA3D;AACA,QAAIrF,CAAC,GAAG,CAAC8D,CAAC,CAACjE,CAAF,GAAIyF,MAAM,CAACzF,CAAZ,IAAe,CAAf,GAAiB,CAAjB,GAAoBwF,IAA5B;AACA,WAAO,KAAKrB,GAAL,CAASjE,CAAT,EAAWC,CAAX,EAAa,CAACD,CAAD,GAAGC,CAAhB,CAAP;AACH;;AAEDgF,EAAAA,SAAS,CAACO,IAAD,EACR;AAAI,QAAIC,EAAE,GAAGtD,IAAI,CAACwB,KAAL,CAAW6B,IAAI,CAACxF,CAAhB,CAAT;AACD,QAAI0F,EAAE,GAAEvD,IAAI,CAACwB,KAAL,CAAW6B,IAAI,CAACvF,CAAhB,CAAR;AACA,QAAI0F,EAAE,GAAExD,IAAI,CAACwB,KAAL,CAAW6B,IAAI,CAACtF,CAAhB,CAAR;AAEA,QAAI0F,MAAM,GAAGzD,IAAI,CAAC0D,GAAL,CAASJ,EAAE,GAAGD,IAAI,CAACxF,CAAnB,CAAb;AACA,QAAI8F,MAAM,GAAG3D,IAAI,CAAC0D,GAAL,CAASH,EAAE,GAAGF,IAAI,CAACvF,CAAnB,CAAb;AACA,QAAI8F,MAAM,GAAG5D,IAAI,CAAC0D,GAAL,CAASF,EAAE,GAAGH,IAAI,CAACtF,CAAnB,CAAb;;AAEA,QAAI0F,MAAM,GAAGE,MAAT,IAAmBF,MAAM,GAAGG,MAAhC,EAAuC;AACnCN,MAAAA,EAAE,GAAG,CAACC,EAAD,GAAIC,EAAT;AACH,KAFD,MAGK,IAAIG,MAAM,GAAGC,MAAb,EACF;AAAEL,MAAAA,EAAE,GAAG,CAACD,EAAD,GAAIE,EAAT;AAAY,KADZ,MAED;AACAA,MAAAA,EAAE,GAAG,CAACF,EAAD,GAAIC,EAAT;AACH;;AAED,WAAO,KAAKzB,GAAL,CAASwB,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,CAAP;AACH;;AAEDK,EAAAA,cAAc,CAACC,SAAD,EAAW;AACrB,UAAMD,cAAc,GAAC,CAAC,KAAK/B,GAAL,CAAS,CAAT,EAAW,CAAX,EAAa,CAAC,CAAd,CAAD,EAAkB,KAAKA,GAAL,CAAS,CAAT,EAAW,CAAC,CAAZ,EAAc,CAAd,CAAlB,EAAmC,KAAKA,GAAL,CAAS,CAAT,EAAW,CAAC,CAAZ,EAAc,CAAd,CAAnC,EAAoD,KAAKA,GAAL,CAAS,CAAC,CAAV,EAAY,CAAZ,EAAc,CAAd,CAApD,EAAqE,KAAKA,GAAL,CAAS,CAAC,CAAV,EAAY,CAAZ,EAAc,CAAd,CAArE,EAAsF,KAAKA,GAAL,CAAS,CAAT,EAAW,CAAX,EAAa,CAAC,CAAd,CAAtF,CAArB;AACA,WAAO+B,cAAc,CAACC,SAAD,CAArB;AACH;;AACDC,EAAAA,OAAO,CAACC,CAAD,EAAGC,CAAH,EAAK;AACR,WAAO,KAAKnC,GAAL,CAASkC,CAAC,CAACnG,CAAF,GAAIoG,CAAC,CAACpG,CAAf,EAAkBmG,CAAC,CAAClG,CAAF,GAAImG,CAAC,CAACnG,CAAxB,EAA2BkG,CAAC,CAACjG,CAAF,GAAIkG,CAAC,CAAClG,CAAjC,CAAP;AACH;;AACDmG,EAAAA,aAAa,CAACC,IAAD,EAAMC,IAAN,EAAW;AAEpB,WAAO,KAAKtC,GAAL,CAASqC,IAAI,CAACtG,CAAL,GAAOuG,IAAI,CAACvG,CAArB,EAAuBsG,IAAI,CAACrG,CAAL,GAAOsG,IAAI,CAACtG,CAAnC,EAAqCqG,IAAI,CAACpG,CAAL,GAAOqG,IAAI,CAACrG,CAAjD,CAAP;AACH;;AACDsG,EAAAA,eAAe,CAACrC,CAAD,EAAG8B,SAAH,EAAa;AACxB,WAAO,KAAKC,OAAL,CAAa/B,CAAb,EAAe,KAAK6B,cAAL,CAAoBC,SAApB,CAAf,CAAP;AAEH;;AACDQ,EAAAA,aAAa,CAACtC,CAAD,EAAG;AACZ,SAAI,IAAIxC,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAE,CAAf,EAAiBA,CAAC,EAAlB,EACA;AACI,YAAK;AAAC3B,QAAAA,CAAD;AAAGC,QAAAA,CAAH;AAAKC,QAAAA;AAAL,UAAQ,KAAKsG,eAAL,CAAqB,KAAKvC,GAAL,CAASE,CAAC,CAACnE,CAAX,EAAamE,CAAC,CAAClE,CAAf,EAAiBkE,CAAC,CAACjE,CAAnB,CAArB,EAA2CyB,CAA3C,CAAb;AACD,YAAK;AAAC9B,QAAAA,CAAD;AAAGC,QAAAA;AAAH,UAAM,KAAKkE,UAAL,CAAgB,KAAKC,GAAL,CAASjE,CAAT,EAAWC,CAAX,EAAaC,CAAb,CAAhB,CAAX;AACA,WAAK2B,OAAL,CAAa,KAAKZ,iBAAlB,EAAoC,KAAKa,KAAL,CAAWjC,CAAX,EAAaC,CAAb,CAApC,EAAoD,KAApD,EAA0D,CAA1D;AACF;AACJ;;AACD4G,EAAAA,YAAY,CAACJ,IAAD,EAAMC,IAAN,EACZ;AACI,UAAK;AAACvG,MAAAA,CAAD;AAAGC,MAAAA,CAAH;AAAKC,MAAAA;AAAL,QAAQ,KAAKmG,aAAL,CAAmBC,IAAnB,EAAwBC,IAAxB,CAAb;AACA,WAAO,CAACpE,IAAI,CAAC0D,GAAL,CAAS7F,CAAT,IAAYmC,IAAI,CAAC0D,GAAL,CAAS5F,CAAT,CAAZ,GAAwBkC,IAAI,CAAC0D,GAAL,CAAS3F,CAAT,CAAzB,IAAsC,CAA7C;AACH;;AAGDyG,EAAAA,SAAS,CAACR,CAAD,EAAGC,CAAH,EAAKQ,CAAL,EACT;AACI,WAAQT,CAAC,GAAC,CAACC,CAAC,GAACD,CAAH,IAAMS,CAAhB;AACH;;AACDC,EAAAA,aAAa,CAACP,IAAD,EAAMC,IAAN,EAAWK,CAAX,EACb;AACI,WAAO,KAAK3C,GAAL,CAAS,KAAK0C,SAAL,CAAeL,IAAI,CAACtG,CAApB,EAAsBuG,IAAI,CAACvG,CAA3B,EAA6B4G,CAA7B,CAAT,EAAyC,KAAKD,SAAL,CAAeL,IAAI,CAACrG,CAApB,EAAsBsG,IAAI,CAACtG,CAA3B,EAA6B2G,CAA7B,CAAzC,EAAyE,KAAKD,SAAL,CAAeL,IAAI,CAACpG,CAApB,EAAsBqG,IAAI,CAACrG,CAA3B,EAA6B0G,CAA7B,CAAzE,CAAP;AACH;;AACDzB,EAAAA,eAAe,CAACmB,IAAD,EAAMC,IAAN,EACf;AACI,QAAIO,IAAI,GAAC,KAAKJ,YAAL,CAAkBJ,IAAlB,EAAuBC,IAAvB,CAAT;AAEA,QAAIQ,GAAG,GAAC,EAAR;;AACA,SAAI,IAAIpF,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAEmF,IAAf,EAAoBnF,CAAC,EAArB,EACA;AACI,UAAIK,MAAM,GAAC,KAAKgC,UAAL,CAAgB,KAAKiB,SAAL,CAAe,KAAK4B,aAAL,CAAmBP,IAAnB,EAAwBC,IAAxB,EAA6B,MAAIO,IAAJ,GAASnF,CAAtC,CAAf,CAAhB,CAAX;AACAoF,MAAAA,GAAG,GAAC,GAAGC,MAAH,CAAUD,GAAV,EAAc/E,MAAd,CAAJ;AAEH;;AACD,SAAKzB,QAAL,CAAc;AACVmB,MAAAA,mBAAmB,EAACqF;AADV,KAAd;AAGH;;AAEDnE,EAAAA,OAAO,CAACL,QAAD,EAAUP,MAAV,EAAiBS,SAAjB,EAA2B;AAC9B,QAAIwE,EAAE,GAAC,KAAKlF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,QAAIkF,EAAE,GAAC,KAAKnF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,QAAImF,EAAE,GAAC,KAAKpF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,QAAIoF,EAAE,GAAC,KAAKrF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,QAAIqF,EAAE,GAAC,KAAKtF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,QAAIsF,EAAE,GAAC,KAAKvF,iBAAL,CAAuBC,MAAvB,EAA8B,CAA9B,CAAP;AACA,UAAMT,GAAG,GAAEgB,QAAQ,CAACf,UAAT,CAAoB,IAApB,CAAX;AACAD,IAAAA,GAAG,CAACwB,SAAJ;AACAxB,IAAAA,GAAG,CAACgG,SAAJ,GAAc9E,SAAd;AACAlB,IAAAA,GAAG,CAACiG,WAAJ,GAAgB,GAAhB;AACAjG,IAAAA,GAAG,CAACyB,MAAJ,CAAWiE,EAAE,CAACpH,CAAd,EAAgBoH,EAAE,CAACnH,CAAnB;AACAyB,IAAAA,GAAG,CAAC4B,MAAJ,CAAW+D,EAAE,CAACrH,CAAd,EAAgBqH,EAAE,CAACpH,CAAnB;AACAyB,IAAAA,GAAG,CAAC4B,MAAJ,CAAWgE,EAAE,CAACtH,CAAd,EAAgBsH,EAAE,CAACrH,CAAnB;AACAyB,IAAAA,GAAG,CAAC4B,MAAJ,CAAWiE,EAAE,CAACvH,CAAd,EAAgBuH,EAAE,CAACtH,CAAnB;AACAyB,IAAAA,GAAG,CAAC4B,MAAJ,CAAWkE,EAAE,CAACxH,CAAd,EAAgBwH,EAAE,CAACvH,CAAnB;AACCyB,IAAAA,GAAG,CAAC4B,MAAJ,CAAWmE,EAAE,CAACzH,CAAd,EAAgByH,EAAE,CAACxH,CAAnB;AACAyB,IAAAA,GAAG,CAAC8B,SAAJ;AACA9B,IAAAA,GAAG,CAACkG,IAAJ;AACJ;;AACDhI,EAAAA,WAAW,GAAE;AACb,SAAKc,QAAL,CAAc;AACVmH,MAAAA,aAAa,EAAC,KAAKhI,KAAL,CAAWK;AADf,KAAd;AAGC;;AACC4H,EAAAA,MAAM,GAAE;AACF,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAQ,QAAA,GAAG,EAAE7G,SAAS,IAAE,KAAKA,SAAL,GAAiBA;AAAzC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEE;AAAQ,QAAA,GAAG,EAAEG,iBAAiB,IAAE,KAAKA,iBAAL,GAAuBA,iBAAvD;AAA0E,QAAA,WAAW,EAAE,KAAK1B,eAA5F;AACA,QAAA,OAAO,EAAE,KAAKE;AADd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AA3S4C","sourcesContent":["import  React,{Component} from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport'./BFS.css';\r\nexport default class BFS extends  React.Component{\r\n\r\n    constructor(props)\r\n    { \r\n        super(props);\r\n        this.handleMouseMove=this.handleMouseMove.bind(this);\r\n      this.handleClick=this.handleClick.bind(this);\r\n        this.state={\r\n            hexSize:20,\r\n            hexOrigin: {x:400,y:300},\r\n            currentHex:{q:0,r:0,s:0,x:0,y:0},\r\n            playerPosition:{q:0,r:0,s:0,x:0,y:0}\r\n        }\r\n\r\n    } \r\n  \r\n    componentWillMount(){\r\n        let hexParametres=this.getHexParametres();\r\n        this.setState({\r\n            canvasSize:{canvasWidth:800,canvasHeight:600},\r\n             hexParametres: hexParametres\r\n        })\r\n\r\n        console.log(\"componentWillM working\");\r\n   \r\n    }\r\ncomponentDidMount(){\r\nconsole.log(\"DidMountWorking-ShivamSolanki\");\r\n\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    this.canvasHex.width=canvasWidth;\r\n    this.canvasHex.height=canvasHeight;\r\n    this.canvasCoordinates.width=canvasWidth;\r\n    this.canvasCoordinates.height=canvasHeight;\r\n    this.getCanvasPosition(this.canvasCoordinates);\r\n    this.drawHexes();\r\n}\r\nshouldComponentUpdate(nextProps,nextState){\r\n    if(nextState.currentHex!==this.state.currentHex){\r\n        const{q,r,s,x,y}=nextState.currentHex;\r\n        const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n       const ctx=this.canvasCoordinates.getContext(\"2d\");\r\n       ctx.clearRect(0,0,canvasWidth,canvasHeight);\r\n     let currentDistanceLine= nextState.currentDistanceLine;\r\n     for(let i=0;i<=currentDistanceLine.length-1;i++)\r\n    {if(i==0)\r\n        this.drawHex(this.canvasCoordinates,this.Point(currentDistanceLine[i].x,currentDistanceLine[i].y),\"black\",1,\"yellow\");\r\n       else   this.drawHex(this.canvasCoordinates,this.Point(currentDistanceLine[i].x,currentDistanceLine[i].y),\"black\",1,\"grey\");\r\n    }\r\n     \r\n     \r\n       // this.drawNeighbors(this.Hex(q,r,s));\r\n       this.drawHex(this.canvasCoordinates,this.Point(x,y),\"lime\",2);\r\n        return true;\r\n    }\r\nreturn false;\r\n    \r\n}\r\n getHexCornerCoord(center, i){\r\n    let angle_deg = 60 * i +30;\r\n    let angle_rad = Math.PI / 180 * angle_deg;\r\n    let x=center.x +this.state.hexSize * Math.cos(angle_rad);\r\n\r\n    let y=center.y + this.state.hexSize * Math.sin(angle_rad);\r\n    return this.Point(x,y);\r\n}\r\nPoint(x,y){\r\n    return {x: x,y: y}\r\n}\r\ndrawHex(canvasID,center,lineColor,width,fillColor){\r\n    for(let i=0;i<=5;i++)\r\n    {\r\n        let start=this.getHexCornerCoord(center,i);\r\n        let end=this.getHexCornerCoord(center,i+1);\r\n        this.fillHex(canvasID,center,fillColor);\r\n        this.drawLine(canvasID,start,end,lineColor,width);\r\n    }\r\n}\r\n\r\ndrawLine(canvasID,start,end,color,width)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n      ctx.beginPath();\r\n    ctx.moveTo(start.x,start.y);\r\n    ctx.strokeStyle=color;\r\n    ctx.lineWidth=width;\r\n\r\n    ctx.lineTo(end.x,end.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\ndrawHexes(){\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    const{hexWidth,hexHeight,verDist,horizDist}=this.state.hexParametres;\r\n    const hexOrigin=this.state.hexOrigin;\r\n    let qLeftSide=Math.round(hexOrigin.x/hexWidth)*4;\r\n    let qRightSide=Math.round(canvasWidth-hexOrigin.x)/hexWidth*2;\r\n      let rTopSide=Math.round(hexOrigin.y/(hexHeight/2));\r\n      let rBottomSide=Math.round((canvasHeight-hexOrigin.y)/(hexHeight/2));\r\n    \r\n      var p=0;\r\n      for(let r=0;r<=rBottomSide;r++){\r\n          if(r%2===0&&r!==0)\r\n          {\r\n              p++;\r\n          }\r\n          for(let q=-qLeftSide;q<=qRightSide;q++)\r\n          {\r\n              const{x,y}=this.hexToPixel(this.Hex(q-p,r))\r\n              if((x>hexWidth/2&&x<canvasWidth-hexWidth/2)&& (y>hexHeight/2&&y<canvasHeight-hexHeight/2)){\r\n                  this.drawHex(this.canvasHex,this.Point(x,y),\"black\",1,\"grey\");\r\n                 // this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q-p,r,-(q-p)-r));\r\n              }\r\n          }\r\n      }\r\n      var n=0;\r\n      for(let r=-1;r>=-rTopSide;r--)\r\n      {\r\n          if(r%2!==0)\r\n          {\r\n              n++;\r\n\r\n          }\r\n          for(let q=-qLeftSide;q<=qRightSide;q++)\r\n          {\r\n              const{x,y}=this.hexToPixel(this.Hex(q+n,r));\r\n              if((x>hexWidth/2&&x<canvasWidth-hexWidth/2)&&(y>hexHeight/2&&y<canvasHeight-hexHeight/2)){\r\n                     this.drawHex(this.canvasHex,this.Point(x,y),\"black\",1,\"grey\");\r\n                    // this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q+n,r,-(q+n)-r));\r\n              }\r\n          }\r\n      }\r\n  \r\n}\r\nhexToPixel(h){let hexOrigin=this.state.hexOrigin;\r\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q  +h.r/2)+hexOrigin.x;;\r\n    let y = this.state.hexSize * (                         3/2 * h.r)+hexOrigin.y;\r\n    return this.Point(x, y);\r\n} \r\n\r\ndrawHexCoordinates(canvasID,center,h)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n    ctx.fillText(h.q,center.x+6,center.y);\r\n    ctx.fillText(h.r,center.x-3,center.y+15);\r\n    ctx.fillText(h.s,center.x-12,center.y);\r\n\r\n}\r\n\r\nHex(q,r,s){\r\n    return {q: q,r: r,s: s}\r\n}\r\ngetHexParametres(){\r\n    let hexHeight=this.state.hexSize*2;\r\n    let hexWidth=Math.sqrt(3)/2*hexHeight;\r\n    let verDist=hexHeight*3/4;\r\n    let horizDist=hexWidth;\r\n    return {hexWidth,hexHeight,verDist,horizDist}\r\n}\r\nhandleMouseMove(e){\r\n    const{left,right,top,bottom}=this.state.canvasPosition;\r\nconst{canvasWidth,canvasHeight}=this.state.canvasSize;\r\nconst{hexWidth,hexHeight,verDist,horizDist}=this.state.hexParametres;\r\n    let offsetX=e.pageX-left;\r\n    let offsetY=e.pageY-top;\r\n    playerPosition=this.state.playerPosition\r\n    const{q,r,s}=this.cubeRound(this.pixelToHex(this.Point(offsetX,offsetY)));\r\n      const{x,y}=this.hexToPixel(this.Hex(q,r,s));\r\n      this.getDistanceLine(this.Hex(playerPosition.q,playerPosition.r,playerPosition.s),this.Hex(q,r,s));\r\n console.log(this.state.currentDistanceLine)\r\n      \r\n    if((x>hexWidth/2&&x<canvasWidth-hexWidth/2)&&(y<canvasHeight-hexHeight/2)){\r\n      this.setState({\r\n          currentHex:{q,r,s,x,y}\r\n      })}\r\n    }\r\ngetCanvasPosition(canvasID)\r\n{\r\n    let rect=canvasID.getBoundingClientRect();\r\n    this.setState({\r\n        canvasPosition: {left: rect.left,right:  rect.right,top: rect.top,bottom:  rect.bottom}\r\n    })\r\n}\r\npixelToHex(p){\r\n    let size=this.state.hexSize;\r\n    let origin=this.state.hexOrigin;\r\n    var q = ((p.x-origin.x)*Math.sqrt(3)/3-(p.y-origin.y)/3) / size\r\n    var r = (p.y-origin.y)*2/3/ size\r\n    return this.Hex(q,r,-q-r);\r\n}\r\n\r\ncubeRound(cube)\r\n {   var rx = Math.round(cube.q)\r\n    var ry =Math.round(cube.r)\r\n    var rz =Math.round(cube.s)\r\n    \r\n    var x_diff = Math.abs(rx - cube.q)\r\n    var y_diff = Math.abs(ry - cube.r)\r\n    var z_diff = Math.abs(rz - cube.s)\r\n\r\n    if (x_diff > y_diff && x_diff > z_diff){\r\n        rx = -ry-rz\r\n    }\r\n    else if( y_diff > z_diff)\r\n       { ry = -rx-rz}\r\n    else{\r\n        rz = -rx-ry\r\n    }\r\n   \r\n    return this.Hex(rx, ry, rz);\r\n}\r\n\r\ncubeDirections(direction){\r\n    const cubeDirections=[this.Hex(1,0,-1),this.Hex(1,-1,0),this.Hex(0,-1,1),this.Hex(-1,0,1),this.Hex(-1,1,0),this.Hex(0,1,-1)];\r\n    return cubeDirections[direction];\r\n}\r\ncubeAdd(a,b){\r\n    return this.Hex(a.q+b.q ,a.r+b.r ,a.s+b.s);\r\n}\r\ncubeSubstract(hexA,hexB){\r\n   \r\n    return this.Hex(hexA.q-hexB.q,hexA.r-hexB.r,hexA.s-hexB.s);\r\n}\r\ngetCubeNeighbor(h,direction){\r\n    return this.cubeAdd(h,this.cubeDirections(direction));\r\n\r\n}\r\ndrawNeighbors(h){\r\n    for(let i=0;i<=5;i++)\r\n    {\r\n        const{q,r,s}=this.getCubeNeighbor(this.Hex(h.q,h.r,h.s),i);\r\n       const{x,y}=this.hexToPixel(this.Hex(q,r,s));\r\n       this.drawHex(this.canvasCoordinates,this.Point(x,y),\"red\",2);\r\n    }\r\n}\r\ncubeDistance(hexA,hexB)\r\n{\r\n    const{q,r,s}=this.cubeSubstract(hexA,hexB);\r\n    return (Math.abs(q)+Math.abs(r)+Math.abs(s))/2;\r\n}\r\n\r\n\r\nlinearInt(a,b,t)\r\n{\r\n    return (a+(b-a)*t)\r\n}\r\ncubeLinearInt(hexA,hexB,t)\r\n{\r\n    return this.Hex(this.linearInt(hexA.q,hexB.q,t),this.linearInt(hexA.r,hexB.r,t),this.linearInt(hexA.s,hexB.s,t));\r\n}\r\ngetDistanceLine(hexA,hexB)\r\n{\r\n    let dist=this.cubeDistance(hexA,hexB);\r\n    \r\n    var arr=[];\r\n    for(let i=0;i<=dist;i++)\r\n    {\r\n        let center=this.hexToPixel(this.cubeRound(this.cubeLinearInt(hexA,hexB,1.0/dist*i)));\r\n        arr=[].concat(arr,center);\r\n\r\n    }\r\n    this.setState({\r\n        currentDistanceLine:arr\r\n    })\r\n}\r\n\r\nfillHex(canvasID,center,fillColor){\r\n    let c0=this.getHexCornerCoord(center,0);\r\n    let c1=this.getHexCornerCoord(center,1);\r\n    let c2=this.getHexCornerCoord(center,2);\r\n    let c3=this.getHexCornerCoord(center,3);\r\n    let c4=this.getHexCornerCoord(center,4);\r\n    let c5=this.getHexCornerCoord(center,5);\r\n    const ctx= canvasID.getContext(\"2d\");\r\n    ctx.beginPath();\r\n    ctx.fillStyle=fillColor;\r\n    ctx.globalAlpha=0.1;\r\n    ctx.moveTo(c0.x,c0.y);\r\n    ctx.lineTo(c1.x,c1.y);\r\n    ctx.lineTo(c2.x,c2.y);\r\n    ctx.lineTo(c3.x,c3.y);\r\n    ctx.lineTo(c4.x,c4.y);\r\n     ctx.lineTo(c5.x,c5.y);\r\n     ctx.closePath();\r\n     ctx.fill();\r\n}\r\nhandleClick(){\r\nthis.setState({\r\n    plaerPosition:this.state.currentHex\r\n})\r\n}\r\n  render(){\r\n        return (\r\n            <div className=\"BFS\">\r\n                <canvas ref={canvasHex=>this.canvasHex = canvasHex}></canvas>\r\n              <canvas ref={canvasCoordinates=>this.canvasCoordinates=canvasCoordinates} onMouseMove={this.handleMouseMove}\r\n              onClick={this.handleClick}></canvas>\r\n            </div>\r\n        )\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}