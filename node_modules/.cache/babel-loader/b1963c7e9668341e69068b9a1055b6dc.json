{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\bfs-visualization\\\\src\\\\BFS\\\\BFS.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './BFS.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BFS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = {\n      hexSize: 20,\n      hexOrigin: {\n        x: 400,\n        y: 300\n      }\n    };\n  }\n\n  componentWillMount() {\n    let hexParametres = this.getHexParametres();\n    this.setState({\n      canvasSize: {\n        canvasWidth: 800,\n        canvasHeight: 600\n      },\n      hexParametres: hexParametres\n    });\n    console.log(\"componentWillM working\");\n  }\n\n  componentDidMount() {\n    console.log(\"DidMountWorking-ShivamSolanki\");\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.canvasCoordinates.width = canvasWidth;\n    this.canvasCoordinates.height = canvasHeight;\n    this.getCanvasPosition(this.canvasCoordinates);\n    this.drawHexes();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.currentHex !== this.state.currentHex) {\n      const {\n        q,\n        r,\n        s,\n        x,\n        y\n      } = nextState.currentHex;\n      const {\n        canvasWidth,\n        canvasHeight\n      } = this.state.canvasSize;\n      const ctx = this.canvasCoordinates.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      this.drawNeighbors(this.Hex(q, r, s));\n      this.drawHex(this.canvasCoordinates, this.Point(x, y), \"lime\", 2);\n      return true;\n    }\n\n    return false;\n  }\n\n  getHexCornerCoord(center, i) {\n    let angle_deg = 60 * i + 30;\n    let angle_rad = Math.PI / 180 * angle_deg;\n    let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n    let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n    return this.Point(x, y);\n  }\n\n  Point(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  drawHex(canvasID, center, color, width) {\n    for (let i = 0; i <= 5; i++) {\n      let start = this.getHexCornerCoord(center, i);\n      let end = this.getHexCornerCoord(center, i + 1);\n      this.drawLine(canvasID, {\n        x: start.x,\n        y: start.y\n      }, {\n        x: end.x,\n        y: end.y\n      }, color, width);\n    }\n  }\n\n  drawLine(canvasID, start, end, color, width) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  drawHexes() {\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    const {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    } = this.state.hexParametres;\n    const hexOrigin = this.state.hexOrigin;\n    let qLeftSide = Math.round(hexOrigin.x / hexWidth) * 4;\n    let qRightSide = Math.round(canvasWidth - hexOrigin.x) / hexWidth * 2;\n    let rTopSide = Math.round(hexOrigin.y / (hexHeight / 2));\n    let rBottomSide = Math.round((canvasHeight - hexOrigin.y) / (hexHeight / 2));\n    var p = 0;\n\n    for (let r = 0; r <= rBottomSide; r++) {\n      if (r % 2 == 0 && r !== 0) {\n        p++;\n      }\n\n      for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const {\n          x,\n          y\n        } = this.hexToPixel(this.Hex(q - p, r));\n\n        if (x > hexWidth / 2 && x < canvasWidth - hexWidth / 2 && y > hexHeight / 2 && y < canvasHeight - hexHeight / 2) {\n          this.drawHex(this.canvasHex, this.Point(x, y));\n          this.drawHexCoordinates(this.canvasHex, this.Point(x, y), this.Hex(q - p, r, -(q - p) - r));\n        }\n      }\n    }\n\n    var n = 0;\n\n    for (let r = -1; r >= -rTopSide; r--) {\n      if (r % 2 !== 0) {\n        n++;\n      }\n\n      for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const {\n          x,\n          y\n        } = this.hexToPixel(this.Hex(q + n, r));\n\n        if (x > hexWidth / 2 && x < canvasWidth - hexWidth / 2 && y > hexHeight / 2 && y < canvasHeight - hexHeight / 2) {\n          this.drawHex(this.canvasHex, this.Point(x, y));\n          this.drawHexCoordinates(this.canvasHex, this.Point(x, y), this.Hex(q + n, r, -(q + n) - r));\n        }\n      }\n    }\n  }\n\n  Hex(q, r, s) {\n    return {\n      q: q,\n      r: r,\n      s: s\n    };\n  }\n\n  drawHexCoordinates(canvasID, center, h) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillText(h.q, center.x + 6, center.y);\n    ctx.fillText(h.r, center.x - 3, center.y + 15);\n    ctx.fillText(h.s, center.x - 12, center.y);\n  }\n\n  hexToPixel(h) {\n    let hexOrigin = this.state.hexOrigin;\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r / 2) + hexOrigin.x;\n    ;\n    let y = this.state.hexSize * (3. / 2 * h.r) + hexOrigin.y;\n    return this.Point(x, y);\n  }\n\n  getHexParametres() {\n    let hexHeight = this.state.hexSize * 2;\n    let hexWidth = Math.sqrt(3) / 2 * hexHeight;\n    let verDist = hexHeight * 3 / 4;\n    let horizDist = hexWidth;\n    return {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    };\n  }\n\n  handleMouseMove(e) {\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.state.canvasPosition;\n    console.log(e.pageX, e.pageY);\n    let offsetX = e.pageX - left;\n    let offsetY = e.pageY - top;\n    const {\n      q,\n      r,\n      s\n    } = this.cubeRound(this.pixelToHex(this.Point(offsetX, offsetY)));\n    const {\n      x,\n      y\n    } = this.hexToPixel(this.Hex(q, r, s));\n    this.drawHex(this.canvasCoordinates, this.Point(x, y), \"yellow\", 2);\n    this.setState({\n      currentHex: {\n        q,\n        r,\n        s,\n        x,\n        y\n      }\n    });\n  }\n\n  getCanvasPosition(canvasID) {\n    let rect = canvasID.getBoundingClientRect();\n    this.setState({\n      canvasPosition: {\n        left: rect.left,\n        right: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      }\n    });\n  }\n\n  pixelToHex(p) {\n    let size = this.state.hexSize;\n    let origin = this.state.hexOrigin;\n    var q = ((p.x - origin.x) * Math.sqrt(3) / 3 - (p.y - origin.y) / 3) / size;\n    var r = (p.y - origin.y) * 2 / 3 / size;\n    return this.Hex(q, r, -q - r);\n  }\n\n  cubeRound(cube) {\n    var rx = Math.round(cube.q);\n    var ry = Math.round(cube.r);\n    var rz = Math.round(cube.s);\n    var x_diff = Math.abs(rx - cube.q);\n    var y_diff = Math.abs(ry - cube.r);\n    var z_diff = Math.abs(rz - cube.s);\n\n    if (x_diff > y_diff && x_diff > z_diff) {\n      rx = -ry - rz;\n    } else if (y_diff > z_diff) ry = -rx - rz;else {\n      rz = -rx - ry;\n    }\n\n    return this.Hex(rx, ry, rz);\n  }\n\n  cubeDirections(direction) {\n    const cubeDirections = [this.Hex(1, 0, -1), this.Hex(1, -1, 0), this.Hex(0, -1, 1), this.Hex(0, -1, 1), this.Hex(-1, 0, -1), this.Hex(-1, 1, 0), this.Hex(0, 1, -1)];\n    return cubeDirections[direction];\n  }\n\n  cubeAdd(a, b) {\n    return this.Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n\n  getCubeNeighbor(h, direction) {\n    return this.cubeAdd(h, this.cubeDirections(direction));\n  }\n\n  drawNeighbors(h) {\n    for (let i = 0; i <= 5; i++) {\n      const {\n        q,\n        r,\n        s\n      } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      const {\n        x,\n        y\n      } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasCoordinates, this.Point(x, y), \"red\", 2);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BFS\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasHex => this.canvasHex = canvasHex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasCoordinates => this.canvasCoordinates = canvasCoordinates,\n        onMouseMove: this.handleMouseMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS/bfs-visualization/src/BFS/BFS.jsx"],"names":["React","Component","ReactDOM","BFS","constructor","props","handleMouseMove","bind","state","hexSize","hexOrigin","x","y","componentWillMount","hexParametres","getHexParametres","setState","canvasSize","canvasWidth","canvasHeight","console","log","componentDidMount","canvasHex","width","height","canvasCoordinates","getCanvasPosition","drawHexes","shouldComponentUpdate","nextProps","nextState","currentHex","q","r","s","ctx","getContext","clearRect","drawNeighbors","Hex","drawHex","Point","getHexCornerCoord","center","i","angle_deg","angle_rad","Math","PI","cos","sin","canvasID","color","start","end","drawLine","beginPath","moveTo","strokeStyle","lineWidth","lineTo","stroke","closePath","hexWidth","hexHeight","verDist","horizDist","qLeftSide","round","qRightSide","rTopSide","rBottomSide","p","hexToPixel","drawHexCoordinates","n","h","fillText","sqrt","e","left","right","top","bottom","canvasPosition","pageX","pageY","offsetX","offsetY","cubeRound","pixelToHex","rect","getBoundingClientRect","size","origin","cube","rx","ry","rz","x_diff","abs","y_diff","z_diff","cubeDirections","direction","cubeAdd","a","b","getCubeNeighbor","render"],"mappings":"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","sourcesContent":["import  React,{Component} from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport'./BFS.css';\r\nexport default class BFS extends  React.Component{\r\n\r\n    constructor(props)\r\n    { \r\n        super(props);\r\n        this.handleMouseMove=this.handleMouseMove.bind(this);\r\n       this.state={\r\n            hexSize:20,\r\n            hexOrigin: {x:400,y:300}\r\n        }\r\n\r\n    } \r\n  \r\n    componentWillMount(){\r\n        let hexParametres=this.getHexParametres();\r\n        this.setState({\r\n            canvasSize:{canvasWidth:800,canvasHeight:600},\r\n             hexParametres: hexParametres\r\n        })\r\n\r\n        console.log(\"componentWillM working\");\r\n   \r\n    }\r\ncomponentDidMount(){\r\nconsole.log(\"DidMountWorking-ShivamSolanki\");\r\n\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    this.canvasHex.width=canvasWidth;\r\n    this.canvasHex.height=canvasHeight;\r\n    this.canvasCoordinates.width=canvasWidth;\r\n    this.canvasCoordinates.height=canvasHeight;\r\n    this.getCanvasPosition(this.canvasCoordinates);\r\n    this.drawHexes();\r\n}\r\nshouldComponentUpdate(nextProps,nextState){\r\n    if(nextState.currentHex!==this.state.currentHex){\r\n        const{q,r,s,x,y}=nextState.currentHex;\r\n        const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n       const ctx=this.canvasCoordinates.getContext(\"2d\");\r\n       ctx.clearRect(0,0,canvasWidth,canvasHeight);\r\n      this.drawNeighbors(this.Hex(q,r,s));\r\n       this.drawHex(this.canvasCoordinates,this.Point(x,y),\"lime\",2);\r\n        return true;\r\n    }\r\nreturn false;\r\n    \r\n}\r\n getHexCornerCoord(center, i){\r\n    let angle_deg = 60 * i +30;\r\n    let angle_rad = Math.PI / 180 * angle_deg;\r\n    let x=center.x +this.state.hexSize * Math.cos(angle_rad);\r\n\r\n    let y=center.y + this.state.hexSize * Math.sin(angle_rad);\r\n    return this.Point(x,y);\r\n}\r\nPoint(x,y){\r\n    return {x: x,y: y}\r\n}\r\ndrawHex(canvasID,center,color,width){\r\n    for(let i=0;i<=5;i++)\r\n    {\r\n        let start=this.getHexCornerCoord(center,i);\r\n        let end=this.getHexCornerCoord(center,i+1);\r\n\r\n        this.drawLine(canvasID,{x:start.x,y:start.y},{x: end.x,y: end.y},color,width);\r\n    }\r\n}\r\n\r\ndrawLine(canvasID,start,end,color,width)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n      ctx.beginPath();\r\n    ctx.moveTo(start.x,start.y);\r\n    ctx.strokeStyle=color;\r\n    ctx.lineWidth=width;\r\n\r\n    ctx.lineTo(end.x,end.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\ndrawHexes(){\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    const{hexWidth,hexHeight,verDist,horizDist}=this.state.hexParametres;\r\n    const hexOrigin=this.state.hexOrigin;\r\n    let qLeftSide=Math.round(hexOrigin.x/hexWidth)*4;\r\n    let qRightSide=Math.round(canvasWidth-hexOrigin.x)/hexWidth*2;\r\n      let rTopSide=Math.round(hexOrigin.y/(hexHeight/2));\r\n      let rBottomSide=Math.round((canvasHeight-hexOrigin.y)/(hexHeight/2));\r\n    \r\n      var p=0;\r\n      for(let r=0;r<=rBottomSide;r++){\r\n          if(r%2==0&&r!==0)\r\n          {\r\n              p++;\r\n          }\r\n          for(let q=-qLeftSide;q<=qRightSide;q++)\r\n          {\r\n              const{x,y}=this.hexToPixel(this.Hex(q-p,r))\r\n              if((x>hexWidth/2&&x<canvasWidth-hexWidth/2)&& (y>hexHeight/2&&y<canvasHeight-hexHeight/2)){\r\n                  this.drawHex(this.canvasHex,this.Point(x,y));\r\n                  this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q-p,r,-(q-p)-r));\r\n              }\r\n          }\r\n      }\r\n      var n=0;\r\n      for(let r=-1;r>=-rTopSide;r--)\r\n      {\r\n          if(r%2!==0)\r\n          {\r\n              n++;\r\n\r\n          }\r\n          for(let q=-qLeftSide;q<=qRightSide;q++)\r\n          {\r\n              const{x,y}=this.hexToPixel(this.Hex(q+n,r));\r\n              if((x>hexWidth/2&&x<canvasWidth-hexWidth/2)&&(y>hexHeight/2&&y<canvasHeight-hexHeight/2)){\r\n                     this.drawHex(this.canvasHex,this.Point(x,y));\r\n                     this.drawHexCoordinates(this.canvasHex,this.Point(x,y),this.Hex(q+n,r,-(q+n)-r));\r\n              }\r\n          }\r\n      }\r\n  \r\n}\r\n\r\nHex(q,r,s){\r\n    return {q: q,r: r,s: s}\r\n}\r\ndrawHexCoordinates(canvasID,center,h)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n    ctx.fillText(h.q,center.x+6,center.y);\r\n    ctx.fillText(h.r,center.x-3,center.y+15);\r\n    ctx.fillText(h.s,center.x-12,center.y);\r\n\r\n}\r\nhexToPixel(h){let hexOrigin=this.state.hexOrigin;\r\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q  +h.r/2)+hexOrigin.x;;\r\n    let y = this.state.hexSize * (                         3./2 * h.r)+hexOrigin.y;\r\n    return this.Point(x, y);\r\n} \r\ngetHexParametres(){\r\n    let hexHeight=this.state.hexSize*2;\r\n    let hexWidth=Math.sqrt(3)/2*hexHeight;\r\n    let verDist=hexHeight*3/4;\r\n    let horizDist=hexWidth;\r\n    return {hexWidth,hexHeight,verDist,horizDist}\r\n}\r\nhandleMouseMove(e){\r\n    const{left,right,top,bottom}=this.state.canvasPosition;\r\n    console.log(e.pageX,e.pageY)\r\n    let offsetX=e.pageX-left;\r\n    let offsetY=e.pageY-top;\r\n    const{q,r,s}=this.cubeRound(this.pixelToHex(this.Point(offsetX,offsetY)));\r\n      const{x,y}=this.hexToPixel(this.Hex(q,r,s));\r\n      this.drawHex(this.canvasCoordinates,this.Point(x,y),\"yellow\",2);\r\n      this.setState({\r\n          currentHex:{q,r,s,x,y}\r\n      })\r\n    }\r\ngetCanvasPosition(canvasID)\r\n{\r\n    let rect=canvasID.getBoundingClientRect();\r\n    this.setState({\r\n        canvasPosition:{left: rect.left,right:rect.right,top:rect.top,bottom:rect.bottom}\r\n    })\r\n}\r\npixelToHex(p){\r\n    let size=this.state.hexSize;\r\n    let origin=this.state.hexOrigin;\r\n    var q = ((p.x-origin.x)*Math.sqrt(3)/3-(p.y-origin.y)/3) / size\r\n    var r = (p.y-origin.y)*2/3/ size\r\n    return this.Hex(q,r,-q-r);\r\n}\r\n\r\ncubeRound(cube)\r\n {   var rx = Math.round(cube.q)\r\n    var ry =Math.round(cube.r)\r\n    var rz =Math.round(cube.s)\r\n\r\n    var x_diff = Math.abs(rx - cube.q)\r\n    var y_diff = Math.abs(ry - cube.r)\r\n    var z_diff = Math.abs(rz - cube.s)\r\n\r\n    if (x_diff > y_diff && x_diff > z_diff){\r\n        rx = -ry-rz\r\n    }\r\n    else if( y_diff > z_diff)\r\n        ry = -rx-rz\r\n    else{\r\n        rz = -rx-ry\r\n    }\r\n    return this.Hex(rx, ry, rz);\r\n}\r\ncubeDirections(direction){\r\n    const cubeDirections=[this.Hex(1,0,-1),this.Hex(1,-1,0),this.Hex(0,-1,1),this.Hex(0,-1,1),this.Hex(-1,0,-1),this.Hex(-1,1,0),this.Hex(0,1,-1)];\r\n    return cubeDirections[direction];\r\n}\r\ncubeAdd(a,b){\r\n    return this.Hex(a.q+b.q ,a.r+b.r ,a.s+b.s);\r\n}\r\ngetCubeNeighbor(h,direction){\r\n    return this.cubeAdd(h,this.cubeDirections(direction));\r\n\r\n}\r\ndrawNeighbors(h){\r\n    for(let i=0;i<=5;i++)\r\n    {\r\n        const{q,r,s}=this.getCubeNeighbor(this.Hex(h.q,h.r,h.s),i);\r\n       const{x,y}=this.hexToPixel(this.Hex(q,r,s));\r\n       this.drawHex(this.canvasCoordinates,this.Point(x,y),\"red\",2);\r\n    }\r\n}\r\n\r\n\r\n  render(){\r\n        return (\r\n            <div className=\"BFS\">\r\n                <canvas ref={canvasHex=>this.canvasHex = canvasHex}></canvas>\r\n              <canvas ref={canvasCoordinates=>this.canvasCoordinates=canvasCoordinates} onMouseMove={this.handleMouseMove}></canvas>\r\n            </div>\r\n        )\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}