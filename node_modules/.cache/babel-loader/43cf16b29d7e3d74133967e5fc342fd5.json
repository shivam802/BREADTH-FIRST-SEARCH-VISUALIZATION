{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\bfs-visualization\\\\src\\\\BFS\\\\BFS.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './BFS.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BFS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hexSize: 20,\n      hexOrigin: {\n        x: 300,\n        y: 300\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      canvasSize: {\n        canvasWidth: 800,\n        canvasHeight: 600\n      }\n    });\n    console.log(\"componentWillM working\");\n  }\n\n  componentDidMount() {\n    console.log(\"DidMountWorking-ShivamSolanki\");\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.drawHexes();\n  }\n\n  getHexCornerCoord(center, i) {\n    let angle_deg = 60 * i + 30;\n    let angle_rad = Math.PI / 180 * angle_deg;\n    let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n    let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n    return this.Point(x, y);\n  }\n\n  Point(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  drawHex(canvasID, center) {\n    for (let i = 0; i <= 5; i++) {\n      let start = this.getHexCornerCoord(center, i);\n      let end = this.getHexCornerCoord(center, i + 1);\n      this.drawLine(canvasID, {\n        x: start.x,\n        y: start.y\n      }, {\n        x: end.x,\n        y: end.y\n      });\n    }\n  }\n\n  drawLine(canvasID, start, end) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  drawHexes() {\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    const {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    } = this.state.hexParametres;\n    const hexOrigin = this.state.hexOrigin;\n    let qLeftSide = Math.round(hexOrigin.x / hexWidth) * 4;\n    let qRightSide = Math.round(canvasWidth - hexOrigin.x) / hexWidth * 2;\n    let rTopSide = Math.round(hexOrigin.y / (hexHeight / 2));\n    let rBottomSide = Math.round((canvasHeight - hexOrigin.y) / (hexHeight / 2));\n\n    for (let r = -rTopSide; r <= rBottomSide; r++) {\n      for (let q = -qLeftSide; q <= qRightSide; q++) {\n        let center = this.hexToPixel(this.Hex(q, r));\n        if (center.x > hexWidth / 2 && center.x < canvasWidth - hexWidth / 2 && center.y) this.drawHex(this.canvasHex, center);\n        this.drawHexCoordinates(this.canvasHex, center, this.Hex(q, r));\n        console.log(\"ss\");\n      }\n    }\n\n    for (let r = 0; r <= 4; r++) {\n      for (let q = 0; q <= 4; q++) {\n        let center = this.hexToPixel(this.Hex(q, r));\n        this.drawHex(this.canvasHex, center);\n        console.log(center);\n        this.drawHexCoordinates(this.canvasHex, center, this.Hex(q, r));\n      }\n    }\n  }\n\n  Hex(q, r) {\n    return {\n      q: q,\n      r: r\n    };\n  }\n\n  drawHexCoordinates(canvasID, center, h) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillText(h.q, center.x - 10, center.y);\n    ctx.fillText(h.r, center.x + 7, center.y);\n  }\n\n  hexToPixel(h) {\n    let hexOrigin = this.state.hexOrigin;\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r / 2) + hexOrigin.x;\n    ;\n    let y = this.state.hexSize * (3. / 2 * h.r) + hexOrigin.y;\n    return this.Point(x, y);\n  }\n\n  getHexParametres() {\n    let hexHeight = this.state.hexSize * 2;\n    let hexWidth = Math.sqrt(3) / 2 * hexHeight;\n    let verDist = hexHeight * 3 / 4;\n    let horizDist = hexWidth;\n    return {\n      hexWidth,\n      hexHeight,\n      verDist,\n      horizDist\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BFS\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasHex => this.canvasHex = canvasHex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS/bfs-visualization/src/BFS/BFS.jsx"],"names":["React","Component","ReactDOM","BFS","constructor","props","state","hexSize","hexOrigin","x","y","componentWillMount","setState","canvasSize","canvasWidth","canvasHeight","console","log","componentDidMount","canvasHex","width","height","drawHexes","getHexCornerCoord","center","i","angle_deg","angle_rad","Math","PI","cos","sin","Point","drawHex","canvasID","start","end","drawLine","ctx","getContext","beginPath","moveTo","lineTo","stroke","closePath","hexWidth","hexHeight","verDist","horizDist","hexParametres","qLeftSide","round","qRightSide","rTopSide","rBottomSide","r","q","hexToPixel","Hex","drawHexCoordinates","h","fillText","sqrt","getHexParametres","render"],"mappings":"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","sourcesContent":["import  React,{Component} from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport'./BFS.css';\r\nexport default class BFS extends  React.Component{\r\n\r\n    constructor(props)\r\n    { \r\n        super(props);\r\n       this.state={\r\n            hexSize:20,\r\n            hexOrigin: {x:300,y:300}\r\n        }\r\n    } \r\n  \r\n    componentWillMount(){\r\n        this.setState({\r\n            canvasSize:{canvasWidth:800,canvasHeight:600}\r\n            \r\n        })\r\n        console.log(\"componentWillM working\");\r\n    }\r\ncomponentDidMount(){\r\nconsole.log(\"DidMountWorking-ShivamSolanki\");\r\n\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    this.canvasHex.width=canvasWidth;\r\n    this.canvasHex.height=canvasHeight;\r\n    this.drawHexes();\r\n}\r\n getHexCornerCoord(center, i){\r\n    let angle_deg = 60 * i +30;\r\n    let angle_rad = Math.PI / 180 * angle_deg;\r\n    let x=center.x +this.state.hexSize * Math.cos(angle_rad);\r\n\r\n    let y=center.y + this.state.hexSize * Math.sin(angle_rad);\r\n    return this.Point(x,y);\r\n}\r\nPoint(x,y){\r\n    return {x: x,y: y}\r\n}\r\ndrawHex(canvasID,center){\r\n    for(let i=0;i<=5;i++)\r\n    {\r\n        let start=this.getHexCornerCoord(center,i);\r\n        let end=this.getHexCornerCoord(center,i+1);\r\n\r\n        this.drawLine(canvasID,{x:start.x,y:start.y},{x: end.x,y: end.y});\r\n    }\r\n}\r\n\r\ndrawLine(canvasID,start,end)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n      ctx.beginPath();\r\n    ctx.moveTo(start.x,start.y);\r\n    ctx.lineTo(end.x,end.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\ndrawHexes(){\r\n    const{canvasWidth,canvasHeight}=this.state.canvasSize;\r\n    const{hexWidth,hexHeight,verDist,horizDist}=this.state.hexParametres;\r\n    const hexOrigin=this.state.hexOrigin;\r\n    let qLeftSide=Math.round(hexOrigin.x/hexWidth)*4;\r\n    let qRightSide=Math.round(canvasWidth-hexOrigin.x)/hexWidth*2;\r\n      let rTopSide=Math.round(hexOrigin.y/(hexHeight/2));\r\n      let rBottomSide=Math.round((canvasHeight-hexOrigin.y)/(hexHeight/2));\r\n      for(let r=-rTopSide;r<=rBottomSide;r++){\r\n          for(let q=-qLeftSide;q<=qRightSide;q++)\r\n          {\r\n              let center=this.hexToPixel(this.Hex(q,r));\r\n              if((center.x>hexWidth/2&&center.x<canvasWidth-hexWidth/2)&&center.y)\r\n               this.drawHex(this.canvasHex,center);\r\n               this.drawHexCoordinates(this.canvasHex,center,this.Hex(q,r));\r\n               console.log(\"ss\");\r\n            }\r\n      }\r\n    for(let r=0;r<=4;r++)\r\n    {\r\n        for(let q=0;q<=4;q++)\r\n        {\r\n          let center=(this.hexToPixel(this.Hex(q,r)));\r\n           this.drawHex(this.canvasHex,center);\r\n          console.log(center);\r\n          this.drawHexCoordinates(this.canvasHex,center,this.Hex(q,r));\r\n\r\n        }\r\n    }\r\n}\r\n\r\nHex(q,r){\r\n    return {q: q,r: r}\r\n}\r\ndrawHexCoordinates(canvasID,center,h)\r\n{\r\n    const ctx=canvasID.getContext(\"2d\");\r\n    ctx.fillText(h.q,center.x-10,center.y);\r\n    ctx.fillText(h.r,center.x+7,center.y);\r\n}\r\nhexToPixel(h){let hexOrigin=this.state.hexOrigin;\r\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q  +h.r/2)+hexOrigin.x;;\r\n    let y = this.state.hexSize * (                         3./2 * h.r)+hexOrigin.y;\r\n    return this.Point(x, y);\r\n} \r\ngetHexParametres(){\r\n    let hexHeight=this.state.hexSize*2;\r\n    let hexWidth=Math.sqrt(3)/2*hexHeight;\r\n    let verDist=hexHeight*3/4;\r\n    let horizDist=hexWidth;\r\n    return {hexWidth,hexHeight,verDist,horizDist}\r\n}\r\n    render(){\r\n        return (\r\n            <div className=\"BFS\">\r\n                <canvas ref={canvasHex=>this.canvasHex = canvasHex}></canvas>\r\n            </div>\r\n        )\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}